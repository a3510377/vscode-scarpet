{
  "name": "scarpet",
  "patterns": [{ "include": "#statements" }, { "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#strings" },
        { "include": "#keywords" },
        { "include": "#punctuation" },
        { "include": "#variables" }
      ]
    },
    "strings": {
      "name": "string.quoted",
      "patterns": [
        {
          "name": "string.quoted.single",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "name": "constant.character.escape", "match": "\\\\." }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "(?<!\\w)(if|return|exit|try|call|import|outer|break|continue|for|c_for|while|loop|vars?|undef)(?!\\w)",
          "captures": { "1": { "name": "keyword.control" } }
        },
        {
          "match": "(?<!\\w)(copy|type|bool|number|str|player)(?!\\w)",
          "captures": { "1": { "name": "support.type.primitive.scarpet" } }
        },
        {
          "expression": "math",
          "name": "keyword.operator.comparison",
          "match": "(>=|<=|==|!=|>|<)"
        },
        { "name": "keyword.operator.logical", "match": "(&&|\\|\\|)" },
        { "name": "keyword.operator.function", "match": "->" }
      ]
    },
    "punctuation": {
      "patterns": [
        { "name": "punctuation.terminator.statement.scarpet", "match": ";" },
        { "name": "punctuation.separator.comma.scarpet", "match": "," }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "constant.numeric",
          "patterns": [
            {
              "name": "constant.numeric",
              "match": "-?\\d+([\\.e]\\d+)?|([\\.e]\\d+)"
            },
            {
              "name": "variable.other.constant",
              "match": "[^\\w]?(pi|euler)[^\\w]"
            },
            {
              "name": "constant.language.scarpet",
              "match": "[^\\w]?(null|true|false)[^\\w]"
            },
            {
              "match": "([_$[a-zA-Z]][_$[A-Za-z0-9]]*)",
              "name": "variable.other.readwrite.scarpet"
            }
          ]
        }
      ]
    },
    "statements": {
      "patterns": [{ "include": "#comments" }, { "include": "#functions" }]
    },
    "comments": {
      "patterns": [
        { "name": "comment.line.number-sign", "match": "\\/\\/.*\\n" }
      ]
    },
    "bracketColorizer": {
      "patterns": [
        {
          "name": "",
          "match": ""
        }
      ]
    }
  },
  "scopeName": "source.sc"
}
